{"version":3,"sources":["utils/apiUrlGenerator.js","utils/Api.js","components/ChannelList/ChannelListSettings.jsx","components/ChannelList/Channel.jsx","components/ChannelList/ChannelListChannels.jsx","components/ChannelList/index.jsx","components/File/index.jsx","components/Favorites/index.jsx","components/Package/PackageNavigation.jsx","components/Downloader/index.jsx","components/Package/PackageHeader.jsx","components/Error.jsx","components/Package/index.jsx","Theme.js","components/Home/index.jsx","components/Stats/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["baseUrl","process","ApiUrlGenerator","buildFileUrl","scmPackageHash","scmFileId","buildFileExportUrl","buildPackageUrl","buildReorderUrl","buildFavoriteUrl","favNo","buildChannelsUrl","buildDownloadUrl","buildUploadUrl","buildUploadJsonUrl","buildImportSettingsUrl","buildStatsUrl","Api","getPackage","scmPackageId","cbSuccess","cbError","fetch","apiUrlGenerator","then","results","json","data","catch","error","getFavorites","callback","getFile","ok","Error","statusText","console","log","saveFile","channels","method","body","JSON","stringify","response","saveFavorites","addChannelsToFav","channelIds","channelData","forEach","channel","channelId","action","removeChannelsFromFav","getStats","useStyles","makeStyles","title","flexGrow","button","marginRight","toolbar","paddingTop","paddingBottom","ChannelListSettings","optionsButton","exportButton","onFilterTextChange","onSortChange","exportUrl","selectedChannels","channelActions","onOptionButtonSuccess","optionButtons","headline","filterText","classes","useState","sortPopperIsVisible","setSortPopperIsVisible","selectionPopperIsVisible","setSelectionPopperIsVisible","channelActionIsInProgress","setChannelActionIsInProgress","sortAnchorRef","React","useRef","selectionAnchorRef","length","Button","variant","color","onClick","ref","className","CircularProgress","size","Popper","open","anchorEl","current","Paper","ClickAwayListener","onClickAway","MenuList","map","item","key","MenuItem","label","undefined","Tooltip","IconButton","window","Toolbar","Typography","component","noWrap","TextField","value","onChange","e","target","field","dir","type","sortOption","handleSortChange","defaultProps","theme","root","selected","boxSizing","marginBottom","width","overflow","background","palette","primary","light","borderBottom","divider","display","justifyContent","padding","border","backgroundColor","outline","fontSize","textAlign","fontWeight","textOverflow","contrastText","Channel","memo","cursorPos","onCursorChange","onChannelChange","onKeyNavigation","onSelectionChange","channelTabIndex","channelNameReadOnly","style","isEditMode","setIsEditMode","channelNo","setChannelNo","channelName","setChannelName","focusInput","event","select","dataset","name","disableEditMode","nextChannelToEnter","nextFieldToEnter","newData","includes","blurInput","onKeyDown","keys","shiftKey","keyCode","preventDefault","id","role","tabIndex","Checkbox","checked","readOnly","onFocus","autoFocus","onBlur","PropTypes","shape","ChannelListChannels","setCursorPos","handleKeyNavigation","currentIndex","newIndex","i","parseInt","handleChannelChange","handleCursorChange","handleSelectionChange","Row","index","indexOf","height","itemCount","itemSize","overscanCount","itemData","ChannelList","text","filter","setFilter","sort","setSort","setSelectedChannels","newSelectedChannels","push","splice","channelsToDisplay","filteredChannels","toLowerCase","filterChannels","channelsToSort","retA","retB","a","b","sortChannels","getChannelsToDisplay","sortField","sortDir","sortType","File","scmPackage","useParams","snackbar","useSnackbar","isInitialized","setIsInitialized","setChannels","filename","setFilename","modifiedChannels","setModifiedChannels","isSaving","setIsSaving","useEffect","modifiedChannelsAction","Object","showMessage","favorites","element","channelsToAdd","clearAfterSaving","newChannels","Snackbar","Alert","elevation","severity","Favorites","initData","channelsToRemove","currentFavNo","changedChannel","container","list","minWidth","PackageNavigation","path","useLocation","pathname","List","files","file","hash","linkTo","link","forwardRef","props","to","ListItem","ListItemIcon","ListItemText","secondary","channelCount","Divider","favorite","Download","Container","href","startIcon","filenameHeadline","PackageHeader","onToggleDrawer","AppBar","position","edge","icon","onReset","Grid","spacing","direction","alignItems","minHeight","xs","underline","flexDirection","mainContainer","main","Package","setScmPackage","scmPackageNavigation","setScmPackageNavigation","navOpen","setNavOpen","isError","setError","handleDrawerToggle","loadData","updateNavigation","Helmet","Downloader","createTheme","Home","setFile","StyledEngineProvider","injectFirst","ThemeProvider","Theme","CssBaseline","onSubmit","FormData","append","Stats","stats","setStats","series","require","config","App","SnackbarProps","autoHideDuration","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf1befce.chunk.js","sourcesContent":["const baseUrl = process.env.REACT_APP_API_URL;\nconst ApiUrlGenerator = {\n  buildFileUrl(scmPackageHash, scmFileId) {\n    return `${baseUrl}${scmPackageHash}/file/${scmFileId}/json/`;\n  },\n\n  buildFileExportUrl(scmPackageHash, scmFileId) {\n    return `${baseUrl}${scmPackageHash}/file/${scmFileId}/csv/`;\n  },\n\n  buildPackageUrl(scmPackageHash) {\n    return `${baseUrl}${scmPackageHash}.json`;\n  },\n\n  buildReorderUrl(scmPackageHash, scmFileId) {\n    return `${baseUrl}${scmPackageHash}/file/${scmFileId}/reorder/`;\n  },\n\n  buildFavoriteUrl(scmPackageHash, favNo) {\n    return `${baseUrl}${scmPackageHash}/favorites/${favNo}.json`;\n  },\n\n  buildChannelsUrl(scmPackageHash) {\n    return `${baseUrl}${scmPackageHash}/channels.json`;\n  },\n\n  buildDownloadUrl(scmPackageHash) {\n    return `${baseUrl}${scmPackageHash}/download/`;\n  },\n\n  buildUploadUrl() {\n    return `${baseUrl}upload/`;\n  },\n\n  buildUploadJsonUrl() {\n    return `${baseUrl} + 'upload.json`;\n  },\n\n  buildImportSettingsUrl(scmPackageHash) {\n    return `${baseUrl}${scmPackageHash}/import-settings.json`;\n  },\n\n  buildStatsUrl() {\n    return `${baseUrl}stats.json`;\n  },\n};\n\nexport default ApiUrlGenerator;\n","import apiUrlGenerator from './apiUrlGenerator';\n// @todo: error-handling implementieren, z.B. ob der result auch json ist usw....\nconst Api = {\n  getPackage(scmPackageId, cbSuccess, cbError) {\n    fetch(apiUrlGenerator.buildPackageUrl(scmPackageId))\n      .then((results) => results.json())\n      .then((data) => {\n        cbSuccess(data);\n      }).catch((error) => {\n        cbError(error);\n      });\n  },\n\n  getFavorites(scmPackageId, favNo, callback) {\n    fetch(apiUrlGenerator.buildFavoriteUrl(scmPackageId, favNo))\n      .then((results) => results.json())\n      .then((data) => {\n        callback(data);\n      });\n  },\n\n  getFile(scmPackageHash, scmFileId, callback) {\n    fetch(apiUrlGenerator.buildFileUrl(scmPackageHash, scmFileId))\n      .then((results) => {\n        if (!results.ok) {\n          throw Error(results.statusText);\n        }\n        return results;\n      })\n      .then((results) => results.json())\n      .then((data) => {\n        callback(data);\n      })\n      .catch((error) => {\n        /* eslint-disable */\n        console.log(error);\n        /* eslint-enable */\n      });\n  },\n\n  saveFile(scmPackageHash, scmFileId, channels, callback) {\n    fetch(apiUrlGenerator.buildFileUrl(scmPackageHash, scmFileId), {\n      method: 'POST',\n      body: JSON.stringify(channels),\n    })\n      .then((response) => response.json())\n      .then(() => { callback(); });\n  },\n\n  saveFavorites(scmPackageHash, favNo, channels, callback) {\n    fetch(apiUrlGenerator.buildFavoriteUrl(scmPackageHash, favNo), {\n      method: 'POST',\n      body: JSON.stringify(channels),\n    })\n      .then((response) => response.json())\n      .then(() => { callback(); });\n  },\n\n  addChannelsToFav(scmPackageHash, favNo, channelIds, callback) {\n    const channelData = {};\n    channelIds.forEach((channel) => {\n      channelData[channel] = {\n        channelId: channel,\n        action: 'add',\n      };\n    });\n    fetch(apiUrlGenerator.buildFavoriteUrl(scmPackageHash, favNo), {\n      method: 'POST',\n      body: JSON.stringify(channelData),\n    })\n      .then((response) => response.json())\n      .then(() => { callback(); });\n  },\n\n  removeChannelsFromFav(scmPackageHash, favNo, channelIds, callback) {\n    const channelData = {};\n    channelIds.forEach((channel) => {\n      channelData[channel] = {\n        channelId: channel,\n        action: 'remove',\n      };\n    });\n    fetch(apiUrlGenerator.buildFavoriteUrl(scmPackageHash, favNo), {\n      method: 'POST',\n      body: JSON.stringify(channelData),\n    })\n      .then((response) => response.json())\n      .then(() => { callback(); });\n  },\n\n  getStats(callback) {\n    fetch(apiUrlGenerator.buildStatsUrl(), {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((data) => { callback(data); });\n  },\n};\n\nexport default Api;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport SortIcon from '@mui/icons-material/Sort';\nimport Popper from '@mui/material/Popper';\nimport Paper from '@mui/material/Paper';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport ExportIcon from '@mui/icons-material/InsertDriveFile';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport makeStyles from '@mui/styles/makeStyles';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nconst useStyles = makeStyles(() => ({\n  title: {\n    flexGrow: 1,\n  },\n  button: {\n    marginRight: '1rem',\n  },\n  toolbar: {\n    paddingTop: '30px',\n    paddingBottom: '20px',\n  },\n}));\n\nconst ChannelListSettings = function ChannelListSettings({\n  onFilterTextChange,\n  onSortChange,\n  exportUrl,\n  selectedChannels,\n  channelActions,\n  onOptionButtonSuccess,\n  optionButtons,\n  headline,\n  filterText,\n}) {\n  const classes = useStyles();\n\n  const [sortPopperIsVisible, setSortPopperIsVisible] = useState(false);\n  const [selectionPopperIsVisible, setSelectionPopperIsVisible] = useState(false);\n  const [channelActionIsInProgress, setChannelActionIsInProgress] = useState(false);\n\n  const sortAnchorRef = React.useRef(null);\n  const selectionAnchorRef = React.useRef(null);\n\n  const sortOptions = [\n    {\n      label: 'channel no asc', field: 'channel_no', dir: 'asc', type: 'number',\n    },\n    {\n      label: 'channel no desc', field: 'channel_no', dir: 'desc', type: 'number',\n    },\n    {\n      label: 'name asc', field: 'name', dir: 'asc', type: 'text',\n    },\n    {\n      label: 'name desc', field: 'name', dir: 'desc', type: 'text',\n    },\n  ];\n\n  const handleFilterTextChange = (e) => {\n    onFilterTextChange(e.target.value);\n  };\n\n  const handleSortChange = (sortOption) => {\n    onSortChange(sortOption.field, sortOption.dir, sortOption.type);\n    setSortPopperIsVisible(false);\n  };\n\n  const handleExport = () => {\n    window.open(exportUrl);\n  };\n\n  let optionsButton;\n  if (selectedChannels.length > 0 && channelActions.length > 0) {\n    optionsButton = (\n      <span>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => setSelectionPopperIsVisible(true)}\n          ref={selectionAnchorRef}\n          className={classes.button}\n        >\n          {selectedChannels.length}\n          {' '}\n          items selected\n          {channelActionIsInProgress && <CircularProgress size={24} />}\n          <ExpandMoreIcon />\n        </Button>\n        <Popper open={selectionPopperIsVisible} anchorEl={selectionAnchorRef.current}>\n          <Paper>\n            <ClickAwayListener onClickAway={() => setSelectionPopperIsVisible(false)}>\n              <MenuList>\n                {channelActions.map((item, key) => (\n                  <MenuItem\n                    // eslint-disable-next-line\n                    key={key}\n                    onClick={() => {\n                      item.onClick(selectedChannels, () => {\n                        setChannelActionIsInProgress(false);\n                        onOptionButtonSuccess();\n                      });\n                      setChannelActionIsInProgress(true);\n                      setSelectionPopperIsVisible(false);\n                    }}\n                  >\n                    {item.label}\n                  </MenuItem>\n                ))}\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Popper>\n      </span>\n    );\n  }\n\n  let exportButton;\n  if (exportUrl !== undefined && exportUrl !== null && exportUrl.length > 0) {\n    exportButton = (\n      <Tooltip title=\"Export as CSV\">\n        <IconButton\n          aria-label=\"delete\"\n          size=\"large\"\n          onClick={handleExport}\n        >\n          <ExportIcon />\n        </IconButton>\n      </Tooltip>\n    );\n  }\n\n  return (\n    // eslint-disable-next-line\n    <Toolbar className=\"channel-list-settings\" className={classes.toolbar}>\n      <div>\n        {optionsButton}\n        {optionButtons}\n      </div>\n      <Typography variant=\"h4\" component=\"h1\" noWrap className={classes.title}>\n        {headline}\n      </Typography>\n      <div>\n        <TextField\n          label=\"Search...\"\n          value={filterText}\n          onChange={handleFilterTextChange}\n          variant=\"standard\"\n        />\n        {exportButton}\n        <Tooltip title=\"Change sort\" open={sortPopperIsVisible ? false : undefined}>\n          <IconButton\n            ref={sortAnchorRef}\n            aria-label=\"change sort\"\n            onClick={() => setSortPopperIsVisible(true)}\n            size=\"large\"\n          >\n            <SortIcon />\n          </IconButton>\n        </Tooltip>\n        <Popper open={sortPopperIsVisible} anchorEl={sortAnchorRef.current}>\n          <Paper>\n            <ClickAwayListener onClickAway={() => setSortPopperIsVisible(false)}>\n              <MenuList>\n                {sortOptions.map((sortOption) => (\n                  <MenuItem key={sortOption.label} onClick={() => handleSortChange(sortOption)}>\n                    {sortOption.label}\n                  </MenuItem>\n                ))}\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Popper>\n      </div>\n    </Toolbar>\n  );\n};\n\nChannelListSettings.propTypes = {\n  onFilterTextChange: PropTypes.func,\n  onSortChange: PropTypes.func,\n  exportUrl: PropTypes.string,\n  selectedChannels: PropTypes.arrayOf(PropTypes.number),\n  channelActions: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    onClick: PropTypes.func,\n  })),\n  onOptionButtonSuccess: PropTypes.func,\n  optionButtons: PropTypes.element,\n  headline: PropTypes.string.isRequired,\n  filterText: PropTypes.string,\n};\nChannelListSettings.defaultProps = {\n  onFilterTextChange: () => {},\n  onSortChange: () => {},\n  exportUrl: undefined,\n  selectedChannels: [],\n  channelActions: [],\n  onOptionButtonSuccess: () => {},\n  optionButtons: undefined,\n  filterText: '',\n};\n\nexport default ChannelListSettings;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport makeStyles from '@mui/styles/makeStyles';\nimport Checkbox from '@mui/material/Checkbox';\n\nconst useStyles = makeStyles((theme) => ({\n  root: (selected) => ({\n    boxSizing: 'border-box',\n    marginBottom: '5px',\n    marginRight: '5px',\n    width: '100%',\n    overflow: 'hidden',\n    background: selected ? theme.palette.primary.light : '',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: '5px',\n    \"& input:not([type='checkbox'])\": {\n      border: '0',\n      backgroundColor: 'transparent',\n      width: '50px',\n    },\n    \"&:hover input:not([type='checkbox']), & input:focus\": {\n      outline: 'none',\n      background: '#33333321',\n    },\n    '& input.name, & input.channel-no': {\n      display: 'inline-block',\n      padding: '5px',\n      marginRight: '1rem',\n      /* color: \"#fff\" */\n    },\n    '& input.channel-no': {\n      width: '60px',\n      fontSize: '15px',\n      textAlign: 'right',\n      marginRight: '5px',\n    },\n    '& input.name': {\n      flexGrow: 1,\n      fontWeight: 'bolder',\n      textOverflow: 'ellipsis',\n      width: '10rem',\n      overflow: 'hidden',\n      fontSize: '15px',\n      padding: '5px',\n    },\n    '&:focus, &:focus-within': {\n      background: theme.palette.primary.light,\n      color: theme.palette.primary.contrastText,\n    },\n  }),\n}));\n\nconst Channel = React.memo(({\n  channelData,\n  cursorPos,\n  onCursorChange,\n  onChannelChange,\n  onKeyNavigation,\n  onSelectionChange,\n  selected,\n  channelTabIndex,\n  channelNameReadOnly,\n  style,\n}) => {\n  /**\n   * Testplan\n   * Creatign a good user expierience is very important for editing a whole bunch of channels.\n   * Users are very different, some users will use mouse navigation others will use key-board\n   * navigation very heavily\n   * We have many different points to check, so there is a manual test plan to check:\n   *\n   * - Keyboard-Navigation without changes works properly (navigating by tab, enter, key-down/up)\n   * - By clicking on a INPUT starts the edit mode and the input gets focused\n   * - By entering the edit-mode the text / number gets selected\n   * - If we click again we can set the cursor to a specific char\n   * - writing inside the input works\n   * - After editing a value and bluring the input it gets saved\n   * - After ediiting a value and doing keyboard-navigation (enter / key down) we get to the\n   *   expected row\n   * - Saving by tabs works properly\n   */\n\n  /**\n   * We have a local state for editing the channel. By entering the edit-mode we copy\n   * the parent-state into the local state. After leaving the edit-mode we trigger a\n   * event so the parent component can handle the change\n   */\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [channelNo, setChannelNo] = useState('');\n  const [channelName, setChannelName] = useState('');\n  const classes = useStyles(selected);\n\n  /**\n   * Notify parent about cursor position (active field)\n   * @param field\n   */\n  const notifyCursorPos = (field) => {\n    // if cursor-position is update, we nothing to do\n    if (cursorPos.channelId === channelData.channelId && cursorPos.field === field) {\n      return;\n    }\n\n    // call parent event handler\n    onCursorChange(channelData.channelId, field);\n  };\n\n  /**\n   * Activate the Edit-Mode and set the the current name/channel-no for modification\n   * @param event\n   */\n  const enterEditMode = () => {\n    if (isEditMode) {\n      return;\n    }\n\n    setIsEditMode(true);\n    setChannelName(channelData.name);\n    setChannelNo(channelData.channelNo);\n  };\n\n  /**\n   * Focus name / number-field\n   * 1) We select all the text (it should by more user friendly)\n   * 2) By focusing the input, we notify the parent about the new cursor position\n   * 3) We enter the edit mode\n   * @param event\n   */\n  const focusInput = (event) => {\n    event.target.select();\n    notifyCursorPos(event.target.dataset.field);\n    enterEditMode(event);\n  };\n\n  /**\n   * Disable Edit Mode\n   * By disabling edit mode we trigger the onChannelChange event (if any data has changed),\n   * so the parent component can handle the change\n   */\n  const disableEditMode = (nextChannelToEnter, nextFieldToEnter) => {\n    setIsEditMode(false);\n\n    // check if anything has changed, in case if not, do nothing anymore\n    if (channelData.name !== channelName || channelData.channelNo !== channelNo) {\n      const newData = {};\n      newData.name = channelName;\n      newData.channelNo = channelNo;\n      onChannelChange({ ...channelData, ...newData });\n    }\n\n    // navigate to next channel if requested\n    if (['up', 'down', 'current'].includes(nextChannelToEnter)) {\n      onKeyNavigation(nextChannelToEnter, nextFieldToEnter);\n    } else {\n      onCursorChange(0, null);\n    }\n  };\n\n  /**\n   * Blur Event\n   * We just land here if we blur the input by mouse. Navigating by keyboard will not result in\n   * bluring input\n   * @param event\n   */\n  const blurInput = () => {\n    disableEditMode(0, null);\n  };\n\n  /**\n   * Keboard-Navigation\n   * @param event\n   */\n  const handleKeyNav = (event) => {\n    const keys = {\n      38: 'up', // KEY_UP\n      40: 'down', // KEY_DOWN\n      13: 'down', // ENTER\n    };\n\n    // tab and current field is \"name\" then switch to next channel\n    if (event.shiftKey && event.keyCode === 9 && event.target.dataset.field === 'no') {\n      disableEditMode('up', 'name');\n      event.preventDefault();\n    } else if (event.shiftKey && event.keyCode === 9 && event.target.dataset.field === 'name') {\n      disableEditMode('current', 'no');\n      event.preventDefault();\n    } else if (event.keyCode === 9 && event.target.dataset.field === 'name') {\n      disableEditMode('down', 'no');\n      event.preventDefault();\n    } else if (event.keyCode === 9 && event.target.dataset.field === 'no') {\n      disableEditMode('current', 'name');\n      event.preventDefault();\n    }\n\n    if (event.keyCode in keys) {\n      disableEditMode(keys[event.keyCode], event.target.dataset.field);\n      event.preventDefault();\n    }\n  };\n\n  const toggleChannelSelection = () => {\n    if (typeof onSelectionChange === 'function') {\n      onSelectionChange(channelData.channelId);\n    }\n  };\n\n  return (\n    <div style={style}>\n      <div\n        className={classes.root}\n        onKeyDown={handleKeyNav}\n        id={`channel-${channelData.channelId}`}\n        role=\"button\"\n        tabIndex=\"0\"\n      >\n        <Checkbox\n          onChange={toggleChannelSelection}\n          checked={selected}\n          color=\"secondary\"\n        />\n        <input\n          type=\"text\"\n          className=\"channel-no\"\n          data-field=\"no\" // field-type for cursorPos\n          tabIndex={channelTabIndex * 10000 + 1} // tabIndex for looping through inputs by tab\n          value={isEditMode ? channelNo : channelData.channelNo}\n          readOnly={!isEditMode}\n          onChange={(e) => { setChannelNo(e.target.value); }}\n          onFocus={focusInput} // if we get the focus we automatically enter the editmodus\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus={cursorPos.channelId === channelData.channelId && cursorPos.field === 'no'}\n          onBlur={blurInput}\n        />\n        <input\n          type=\"text\"\n          className=\"name\"\n          data-field=\"name\"\n          tabIndex={channelTabIndex * 10000 + 2}\n          value={isEditMode ? channelName : channelData.name}\n          onChange={(e) => { setChannelName(e.target.value); }}\n          onFocus={focusInput}\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus={cursorPos.channelId === channelData.channelId && cursorPos.field === 'name'}\n          onBlur={blurInput}\n          readOnly={channelNameReadOnly}\n        />\n      </div>\n    </div>\n  );\n});\n\nChannel.propTypes = {\n  channelData: PropTypes.shape({\n    channelId: PropTypes.number,\n    channelNo: PropTypes.number,\n    name: PropTypes.string,\n  }).isRequired,\n  cursorPos: PropTypes.shape({\n    channelId: PropTypes.number,\n    field: PropTypes.string,\n  }),\n  onCursorChange: PropTypes.func,\n  onChannelChange: PropTypes.func,\n  onKeyNavigation: PropTypes.func,\n  onSelectionChange: PropTypes.func,\n  selected: PropTypes.bool,\n  style: PropTypes.shape({\n\n  }),\n  channelTabIndex: PropTypes.number,\n  channelNameReadOnly: PropTypes.bool,\n};\nChannel.defaultProps = {\n  cursorPos: PropTypes.shape({\n    channelId: 0,\n    field: 'no',\n  }),\n  onCursorChange: () => {},\n  onChannelChange: () => {},\n  onKeyNavigation: () => {},\n  onSelectionChange: () => {},\n  selected: false,\n  channelTabIndex: 0,\n  channelNameReadOnly: false,\n  style: '',\n};\n\nexport default Channel;\n","import { AutoSizer } from 'react-virtualized';\nimport { FixedSizeList as List } from 'react-window';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Channel from './Channel';\n\nconst ChannelListChannels = function ChannelListChannels({\n  channels,\n  onChannelChange,\n  onSelectionChange,\n  channelNameReadOnly,\n  selectedChannels,\n}) {\n  const [cursorPos, setCursorPos] = useState({ channelId: 0, field: 'no' });\n\n  const handleKeyNavigation = (dir, field) => {\n    let currentIndex;\n    let newIndex;\n\n    /* eslint-disable */\n    for (const i in channels) {\n      if (cursorPos.channelId !== channels[i].channelId) {\n        continue;\n      }\n      currentIndex = parseInt(i, 10);\n      switch (dir) {\n        case 'left':\n          newIndex = currentIndex - 1;\n          break;\n        case 'right':\n          newIndex = currentIndex + 1;\n          break;\n        case 'down':\n          newIndex = currentIndex + 1;\n          break;\n        case 'up':\n          newIndex = currentIndex - 1;\n          break;\n        case 'current':\n          newIndex = currentIndex;\n          break;\n        default:\n      }\n      /* eslint-enable */\n      if (typeof channels[newIndex] !== 'undefined') {\n        setCursorPos({ channelId: channels[newIndex].channelId, field, selectedChannels });\n      }\n    }\n  };\n\n  const handleChannelChange = (channel) => {\n    if (typeof onChannelChange === 'function') {\n      onChannelChange(channel);\n    }\n  };\n\n  const handleCursorChange = (channelId, field) => {\n    setCursorPos({ channelId, field });\n  };\n\n  const handleSelectionChange = (channelId) => {\n    onSelectionChange(channelId);\n  };\n\n  let channelTabIndex = 0;\n\n  /* eslint-disable */\n  const Row = function ({ index, style }) {\n    const channel = channels[index];\n    const selected = selectedChannels.indexOf(channel.channelId) !== -1;\n    channelTabIndex += 1;\n\n    return (\n      <Channel\n        channelData={channel}\n        key={channel.channelId}\n        channelTabIndex={channelTabIndex}\n        onChannelChange={handleChannelChange}\n        onKeyNavigation={handleKeyNavigation}\n        onCursorChange={handleCursorChange}\n        cursorPos={cursorPos}\n        style={style}\n        onSelectionChange={handleSelectionChange}\n        selected={selected}\n        channelNameReadOnly={channelNameReadOnly}\n      />\n    );\n  };\n  /* eslint-enable */\n\n  return (\n    <div id=\"channel-list-container\">\n      <AutoSizer>\n        {({ height, width }) => (\n          <List\n            height={height}\n            itemCount={channels.length}\n            itemSize={55}\n            width={width}\n            className=\"channels\"\n            overscanCount={5}\n            itemData={channels}\n          >\n            {Row}\n          </List>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n\nChannelListChannels.propTypes = {\n  channels: PropTypes.arrayOf(PropTypes.shape({\n    channelId: PropTypes.number,\n    channelNo: PropTypes.number,\n    name: PropTypes.string,\n  })).isRequired,\n  onChannelChange: PropTypes.func,\n  onSelectionChange: PropTypes.func,\n  channelNameReadOnly: PropTypes.bool,\n  selectedChannels: PropTypes.arrayOf(PropTypes.number),\n};\nChannelListChannels.defaultProps = {\n  onChannelChange: () => {},\n  onSelectionChange: () => {},\n  channelNameReadOnly: () => {},\n  selectedChannels: [],\n};\n\nexport default ChannelListChannels;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ChannelListSettings from './ChannelListSettings';\nimport ChannelListChannels from './ChannelListChannels';\n\nconst ChannelList = function ChannelList({\n  channels,\n  onChannelChange,\n  channelActions,\n  optionButtons,\n  headline,\n  exportUrl,\n  channelNameReadOnly,\n}) {\n  const defaultSort = { field: 'channel_no', dir: 'asc', type: 'number' };\n\n  const [filter, setFilter] = useState({ text: '' });\n  const [sort, setSort] = useState(defaultSort);\n  const [selectedChannels, setSelectedChannels] = useState([]);\n\n  /* eslint-disable */\n  const filterChannels = (channels) => {\n    const filteredChannels = [];\n    for (const i in channels) {\n      if (channels[i].name.toLowerCase().indexOf(filter.text.toLowerCase()) !== -1) {\n        filteredChannels.push(channels[i]);\n      }\n    }\n    return filteredChannels;\n  };\n  /* eslint-enable */\n\n  const sortChannels = (channelsToSort) => {\n    const retA = sort.dir === 'desc' ? 1 : -1;\n    const retB = sort.dir === 'desc' ? -1 : 1;\n\n    switch (sort.type) {\n      case 'number':\n        /* eslint-disable */\n        channelsToSort.sort((a, b) => (parseInt(a[sort.field], 10) > parseInt(b[sort.field], 10) ? retA : retB));\n        /* eslint-enable */\n        break;\n      case 'text':\n      default:\n        channelsToSort.sort((a, b) => (a[sort.field] > b[sort.field] ? retB : retA));\n    }\n\n    return channelsToSort;\n  };\n\n  const handleSortChange = (field, dir, type) => {\n    setSort({ field, dir, type });\n  };\n\n  const getChannelsToDisplay = () => {\n    let channelsToDisplay = filterChannels(channels);\n    channelsToDisplay = sortChannels(channelsToDisplay);\n\n    return channelsToDisplay;\n  };\n\n  const handleChannelChange = (channel) => {\n    if (typeof onChannelChange === 'function') {\n      onChannelChange(channel);\n    }\n  };\n\n  const handleSelectionChange = (channelId) => {\n    const newSelectedChannels = [...selectedChannels];\n    const index = newSelectedChannels.indexOf(channelId);\n    if (index === -1) {\n      newSelectedChannels.push(channelId);\n    } else {\n      newSelectedChannels.splice(index, 1);\n    }\n    setSelectedChannels(newSelectedChannels);\n  };\n\n  const handleOptionButtonSuccess = () => {\n    setSelectedChannels([]);\n  };\n\n  const channelsToDisplay = getChannelsToDisplay(channels);\n\n  return (\n    <div className=\"channel-list\">\n      <ChannelListSettings\n        filterText={filter.text}\n        sort={{ sortField: 'name', sortDir: 'desc', sortType: 'text' }}\n        sortField={sort.field}\n        sortDir={sort.dir}\n        sortType={sort.type}\n        onFilterTextChange={(text) => setFilter({ text })}\n        onSortChange={handleSortChange}\n        onSelectionChange={handleSelectionChange}\n        selectedChannels={selectedChannels}\n        channelActions={channelActions}\n        optionButtons={optionButtons}\n        onOptionButtonSuccess={handleOptionButtonSuccess}\n        headline={headline}\n        exportUrl={exportUrl}\n      />\n      <ChannelListChannels\n        channels={channelsToDisplay}\n        onChannelChange={handleChannelChange}\n        onSelectionChange={handleSelectionChange}\n        selectedChannels={selectedChannels}\n        channelNameReadOnly={channelNameReadOnly}\n      />\n    </div>\n  );\n};\n\nChannelList.propTypes = {\n  channels: PropTypes.arrayOf(PropTypes.shape({\n    channelId: PropTypes.number,\n    channelNo: PropTypes.number,\n    name: PropTypes.string,\n  })).isRequired,\n  onChannelChange: PropTypes.func,\n  channelActions: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    onClick: PropTypes.func,\n  })).isRequired,\n  optionButtons: PropTypes.element,\n  headline: PropTypes.string.isRequired,\n  exportUrl: PropTypes.string,\n  channelNameReadOnly: PropTypes.bool,\n};\nChannelList.defaultProps = {\n  onChannelChange: () => {},\n  channelNameReadOnly: true,\n  exportUrl: undefined,\n  optionButtons: undefined,\n};\n\nexport default ChannelList;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport makeStyles from '@mui/styles/makeStyles';\nimport { useSnackbar } from 'material-ui-snackbar-provider';\nimport PropTypes from 'prop-types';\nimport apiUrlGenerator from '../../utils/apiUrlGenerator';\nimport Api from '../../utils/Api';\nimport ChannelList from '../ChannelList';\n\nconst useStyles = makeStyles(() => ({\n  title: {\n    flexGrow: 1,\n  },\n  button: {\n    marginRight: '1rem',\n  },\n}));\n\nconst File = function File({ scmPackage, onChange }) {\n  const { scmPackageHash, scmFileId } = useParams();\n  const classes = useStyles();\n  const snackbar = useSnackbar();\n\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [channels, setChannels] = useState([]);\n  const [filename, setFilename] = useState(undefined);\n  const [modifiedChannels, setModifiedChannels] = useState({});\n  const [isSaving, setIsSaving] = useState(false);\n\n  useEffect(() => {\n    Api.getFile(scmPackageHash, scmFileId, (data) => {\n      setChannels(data.channels);\n      setFilename(data.label);\n      setIsInitialized(true);\n    });\n  }, [scmPackageHash, scmFileId]);\n\n  const handleChannelChange = (channel) => {\n    const newChannels = [...channels];\n    /* eslint-disable */\n    for (const i in newChannels) {\n      if (newChannels[i].channelId === channel.channelId) {\n        newChannels[i] = channel;\n      }\n    }\n    /* eslint-enable */\n    setChannels(newChannels);\n    setModifiedChannels({ ...modifiedChannels, [channel.channelId]: channel });\n  };\n\n  const addChannelsToFav = (channelIds, favNo, clearAfterSaving) => {\n    Api.addChannelsToFav(scmPackageHash, favNo, channelIds, () => {\n      setModifiedChannels({});\n      clearAfterSaving();\n      snackbar.showMessage(\n        `${channelIds.length} channel(s) successfully added to Fav #${favNo}`,\n      );\n      onChange();\n    });\n  };\n\n  const save = () => {\n    setIsSaving(true);\n    Api.saveFile(scmPackageHash, scmFileId, modifiedChannels, () => {\n      setModifiedChannels({});\n      setIsSaving(false);\n      onChange();\n      snackbar.showMessage(\n        'File successfully saved',\n      );\n    });\n  };\n\n  let modifiedChannelsAction;\n\n  if (Object.keys(modifiedChannels).length > 0) {\n    modifiedChannelsAction = (\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={save}\n        className={classes.button}\n      >\n        <SaveIcon />\n        Save\n        {' '}\n        {Object.keys(modifiedChannels).length}\n        {' '}\n        item(s)\n        {isSaving && <CircularProgress size={24} />}\n      </Button>\n    );\n  }\n\n  const channelActions = [];\n  // eslint-disable-next-line\n  scmPackage.favorites.forEach((element) => {\n    channelActions.push({ label: `Add to Fav #${element.favNo}`, onClick: (channelsToAdd, clearAfterSaving) => { addChannelsToFav(channelsToAdd, element.favNo, clearAfterSaving); } });\n  });\n\n  return (\n    isInitialized\n      ? (\n        <ChannelList\n          channels={channels}\n          onChannelChange={handleChannelChange}\n          channelActions={channelActions}\n          optionButtons={modifiedChannelsAction}\n          headline={filename}\n          exportUrl={apiUrlGenerator.buildFileExportUrl(scmPackageHash, scmFileId)}\n          channelNameReadOnly={false}\n        />\n      )\n      : (\n        <Snackbar open>\n          <Alert elevation={6} variant=\"filled\" severity=\"info\">\n            Loading ...\n          </Alert>\n        </Snackbar>\n      )\n  );\n};\n\nFile.propTypes = {\n  onChange: PropTypes.func,\n  scmPackage: PropTypes.shape({\n    hash: PropTypes.string.isRequired,\n    favorites: PropTypes.arrayOf(\n      PropTypes.shape({\n        favNo: PropTypes.number,\n        channelCount: PropTypes.number,\n      }),\n    ),\n  }).isRequired,\n};\nFile.defaultProps = {\n  onChange: () => {},\n};\n\nexport default File;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useSnackbar } from 'material-ui-snackbar-provider';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport SaveIcon from '@mui/icons-material/Save';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport makeStyles from '@mui/styles/makeStyles';\nimport Api from '../../utils/Api';\nimport ChannelList from '../ChannelList';\n\nconst useStyles = makeStyles(() => ({\n  title: {\n    flexGrow: 1,\n  },\n  button: {\n    marginRight: '1rem',\n  },\n}));\n\nconst Favorites = function Favorites({ onChange }) {\n  const { scmPackageHash, favNo } = useParams();\n  const snackbar = useSnackbar();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [channels, setChannels] = useState([]);\n  const [modifiedChannels, setModifiedChannels] = useState({});\n  const [isSaving, setIsSaving] = useState(false);\n  const classes = useStyles();\n\n  const initData = () => {\n    Api.getFavorites(scmPackageHash, favNo, (data) => {\n      setChannels(data.selectedChannels);\n      setIsInitialized(true);\n    });\n  };\n\n  useEffect(() => {\n    initData();\n    // eslint-disable-next-line\n  }, [scmPackageHash, favNo])\n\n  const save = () => {\n    const newChannels = [...channels];\n    newChannels.sort((a, b) => (parseInt(a.channelNo, 10) > parseInt(b.channelNo, 10) ? 1 : -1));\n    const data = [];\n    newChannels.forEach((item) => data.push({ channelId: item.channelId, sort: item.channelNo }));\n    setIsSaving(true);\n    Api.saveFavorites(scmPackageHash, favNo, data, () => {\n      setModifiedChannels({});\n      setIsSaving(false);\n      onChange();\n    });\n  };\n\n  const removeChannelsFromFav = (channelIds, currentFavNo, clearAfterSaving) => {\n    Api.removeChannelsFromFav(scmPackageHash, currentFavNo, channelIds, () => {\n      clearAfterSaving();\n      snackbar.showMessage(\n        `${channelIds.length} channel(s) successfully removed from Fav #${currentFavNo}`,\n      );\n      onChange();\n      initData();\n    });\n  };\n\n  const handleChannelChange = (changedChannel) => {\n    const newChannels = [...channels];\n    /* eslint-disable */\n    for (const i in newChannels) {\n      if (newChannels[i].channelId === changedChannel.channelId) {\n        newChannels[i] = {\n          channelId: parseInt(changedChannel.channelId),\n          channelNo: parseInt(changedChannel.channelNo),\n          name: changedChannel.name,\n        };\n      }\n    }\n    /* eslint-disable */\n    setChannels(newChannels);\n    setModifiedChannels({ ...modifiedChannels, [changedChannel.channelId]: changedChannel });\n  };\n\n  let modifiedChannelsAction;\n\n  if (Object.keys(modifiedChannels).length > 0) {\n    modifiedChannelsAction = (\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={save}\n        className={classes.button}\n      >\n        <SaveIcon />\n        Save\n        {' '}\n        {Object.keys(modifiedChannels).length}\n        {' '}\n        item\n        {isSaving && <CircularProgress size={24} />}\n      </Button>\n    );\n  }\n\n  const channelActions = [\n    { label: 'Remove from Fav', onClick: (channelsToRemove, clearAfterSaving) => { removeChannelsFromFav(channelsToRemove, favNo, clearAfterSaving); } },\n  ];\n\n  return (\n    isInitialized\n      ? (\n        <ChannelList\n          channels={channels}\n          channelActions={channelActions}\n          channelNameReadOnly\n          onChannelChange={handleChannelChange}\n          optionButtons={modifiedChannelsAction}\n          headline={`Favorites #${favNo}`}\n        />\n      ) : (\n        <Snackbar open>\n          <Alert elevation={6} variant=\"filled\" severity=\"info\">\n            Loading ...\n          </Alert>\n        </Snackbar>\n      )\n  );\n};\n\nFavorites.propTypes = {\n  onChange: PropTypes.func,\n};\nFavorites.defaultProps = {\n  onChange: () => {},\n};\n\nexport default Favorites;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport List from '@mui/material/List';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport TvIcon from '@mui/icons-material/Tv';\nimport StarIcon from '@mui/icons-material/Star';\nimport makeStyles from '@mui/styles/makeStyles';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles(() => ({\n  root: (open) => ({\n    /* background: theme.palette.primary.light, */\n    width: open ? 'auto' : '60px',\n  }),\n  container: {\n    overflow: 'hidden',\n  },\n  list: {\n    minWidth: '240px',\n  },\n}));\n\nconst PackageNavigation = function PackageNavigation({ scmPackage, open }) {\n  const classes = useStyles(open);\n  const path = useLocation().pathname;\n\n  if (!scmPackage) {\n    return <div />;\n  }\n\n  const getNavFiles = () => {\n    if (typeof scmPackage.files === 'undefined') return [];\n    return scmPackage.files.map((file) => {\n      const { hash } = scmPackage;\n      const linkTo = `/p/${hash}/files/${file.scmFileId}`;\n      // eslint-disable-next-line\n      const link = React.forwardRef((props, ref) => <Link {...props} to={linkTo} ref={ref} />);\n      return (\n        <ListItem key={`list-item-file-${file.scmFileId}`} button component={link} selected={linkTo === path}>\n          <ListItemIcon><TvIcon /></ListItemIcon>\n          <ListItemText primary={file.label} secondary={`${file.channelCount} channels`} />\n        </ListItem>\n      );\n    });\n  };\n\n  const getNavFavorites = () => {\n    if (typeof scmPackage.favorites === 'undefined') return [];\n\n    return scmPackage.favorites.map((favorite) => {\n      const { hash } = scmPackage;\n      const linkTo = `/p/${hash}/favorites/${favorite.favNo}`;\n      // eslint-disable-next-line\n      const link = React.forwardRef((props, ref) => <Link {...props} to={linkTo} ref={ref} />);\n      return (\n        <ListItem key={`list-item-fav-${favorite.favNo}`} button component={link} selected={linkTo === path}>\n          <ListItemIcon><StarIcon /></ListItemIcon>\n          <ListItemText primary={`Fav #${favorite.favNo}`} secondary={`${favorite.channelCount} channels`} />\n        </ListItem>\n      );\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.container}>\n        <List className={classes.list}>\n          {getNavFiles()}\n        </List>\n        <Divider />\n        <List className={classes.list}>\n          {getNavFavorites()}\n        </List>\n      </div>\n    </div>\n  );\n};\n\nPackageNavigation.propTypes = {\n  scmPackage: PropTypes.shape({\n    hash: PropTypes.string,\n    scmPackageId: PropTypes.number,\n    filename: PropTypes.string,\n    files: PropTypes.arrayOf(PropTypes.shape({\n      scmFileId: PropTypes.number,\n      label: PropTypes.string,\n      icon: PropTypes.string,\n      channelCount: PropTypes.number,\n    })),\n    favorites: PropTypes.arrayOf(PropTypes.shape({\n      favNo: PropTypes.number,\n      channelCount: PropTypes.number,\n    })),\n  }).isRequired,\n  open: PropTypes.bool,\n};\nPackageNavigation.defaultProps = {\n  open: true,\n};\nexport default PackageNavigation;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Container from '@mui/material/Container';\nimport CloudDownloadIcon from '@mui/icons-material/CloudDownload';\nimport Button from '@mui/material/Button';\nimport apiUrlGenerator from '../../utils/apiUrlGenerator';\n\nconst Download = function Downloader() {\n  const { scmPackageHash } = useParams();\n  return (\n    <Container>\n      <h1>Download</h1>\n      <p>\n        Thank you for using SamyCHAN. Click the download button and save the file to your usb-stick.\n        Afterwards you can import the file into your SAMSUNG television.\n      </p>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        href={apiUrlGenerator.buildDownloadUrl(scmPackageHash)}\n        startIcon={<CloudDownloadIcon />}\n      >\n        Download channel list\n      </Button>\n    </Container>\n  );\n};\n\nexport default Download;\n","import React from 'react';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport AppBar from '@mui/material/AppBar';\nimport { Link } from 'react-router-dom';\nimport makeStyles from '@mui/styles/makeStyles';\nimport CloudDownloadIcon from '@mui/icons-material/CloudDownload';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles(() => ({\n  filenameHeadline: {\n    flexGrow: 1,\n  },\n}));\n\nconst PackageHeader = function PackageHeader({ onToggleDrawer, scmPackage }) {\n  const classes = useStyles();\n  const handleDrawerToggle = () => {\n    onToggleDrawer();\n  };\n\n  if (!scmPackage) {\n    return <AppBar />;\n  }\n\n  const { hash } = scmPackage;\n\n  // eslint-disable-next-line\n  const link = React.forwardRef((props, ref) => <Link {...props} to={`/p/${hash}/download`} ref={ref} />);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"menu\"\n          onClick={handleDrawerToggle}\n          size=\"large\"\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.filenameHeadline}>\n          {scmPackage.filename}\n        </Typography>\n        <Button variant=\"contained\" color=\"secondary\" component={link} startIcon={<CloudDownloadIcon />}>Download</Button>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nPackageHeader.propTypes = {\n  scmPackage: PropTypes.shape({\n    hash: PropTypes.string,\n    scmPackageId: PropTypes.number,\n    filename: PropTypes.string,\n    files: PropTypes.arrayOf(PropTypes.shape({\n      scmFileId: PropTypes.number,\n      label: PropTypes.string,\n      icon: PropTypes.string,\n      channelCount: PropTypes.number,\n    })),\n    favorites: PropTypes.arrayOf(PropTypes.shape({\n      favNo: PropTypes.number,\n      channelCount: PropTypes.number,\n    })),\n  }).isRequired,\n  onToggleDrawer: PropTypes.func,\n};\nPackageHeader.defaultProps = {\n  onToggleDrawer: () => {},\n};\n\nexport default PackageHeader;\n","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport makeStyles from '@mui/styles/makeStyles';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles(() => ({\n  icon: {\n    fontSize: '50px',\n  },\n}));\n\nconst Error = function Error({ onReset }) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      style={{ minHeight: '100vh' }}\n    >\n      <Grid item xs={3}>\n        <div style={{ textAlign: 'center' }}>\n          <ErrorOutlineIcon className={classes.icon} />\n          <h1>Error</h1>\n          <p>Something went wrong</p>\n          <Button onClick={onReset} href=\"#\" underline=\"hover\">Retry</Button>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nError.propTypes = {\n  onReset: PropTypes.element.isRequired,\n};\n\nexport default Error;\n","import React, { useEffect, useState } from 'react';\nimport { Route, useParams } from 'react-router-dom';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport makeStyles from '@mui/styles/makeStyles';\nimport { Helmet } from 'react-helmet';\nimport File from '../File';\nimport Favorites from '../Favorites';\nimport PackageNavigation from './PackageNavigation';\nimport Downloader from '../Downloader';\nimport Api from '../../utils/Api';\nimport PackageHeader from './PackageHeader';\nimport Error from '../Error';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n  },\n  mainContainer: {\n    display: 'flex',\n    flexGrow: 1,\n    overflow: 'hidden',\n  },\n  main: {\n    flexGrow: 1,\n  },\n}));\n\nconst Package = function Package() {\n  const classes = useStyles();\n  const { scmPackageHash } = useParams();\n  const [scmPackage, setScmPackage] = useState(undefined);\n  const [scmPackageNavigation, setScmPackageNavigation] = useState(undefined);\n  const [navOpen, setNavOpen] = useState(true);\n  const [isError, setError] = useState(null);\n\n  const handleDrawerToggle = () => {\n    setNavOpen(!navOpen);\n  };\n\n  const loadData = () => {\n    setError(null);\n    Api.getPackage(scmPackageHash, (data) => {\n      setScmPackage(data);\n      setScmPackageNavigation(data);\n    }, (error) => setError(error));\n  };\n\n  useEffect(() => {\n    loadData();\n    // eslint-disable-next-line\n  }, [scmPackageHash])\n\n  const updateNavigation = () => {\n    Api.getPackage(scmPackageHash, (data) => setScmPackageNavigation(data));\n  };\n\n  /* eslint-disable */\n  const render = () => (\n    <div className={classes.root}>\n      <Helmet>\n        <title>\n          {scmPackage.filename}\n          {' '}\n          | SamyCHAN\n        </title>\n      </Helmet>\n      <PackageHeader scmPackage={scmPackageNavigation} onToggleDrawer={handleDrawerToggle} />\n      <div className={classes.mainContainer}>\n        <PackageNavigation open={navOpen} scmPackage={scmPackageNavigation} />\n        <main className={classes.main}>\n          <Route path=\"/p/:scmPackageHash/files/:scmFileId\" component={(props) => <File {...props} scmPackage={scmPackage} onChange={() => { updateNavigation(); }} />} />\n          <Route path=\"/p/:scmPackageHash/favorites/:favNo\" component={(props) => <Favorites {...props} onChange={() => { updateNavigation(); }} />} />\n          <Route path=\"/p/:scmPackageHash/download\" component={Downloader} />\n        </main>\n      </div>\n    </div>\n  );\n  /* eslint-enable */\n\n  const showLoadingScreen = () => (\n    <CircularProgress />\n  );\n\n  if (isError) {\n    return <Error onReset={loadData} />;\n  } if (typeof scmPackage !== 'undefined' && typeof scmPackageNavigation !== 'undefined') {\n    return render();\n  }\n  return showLoadingScreen();\n};\n\nexport default Package;\n","import { createTheme } from '@mui/material/styles';\n\nexport default createTheme({\n  palette: {\n    /* mode: 'dark',\n    primary: {\n      main: '#463750',\n    },\n    secondary: {\n      main: '#f44f1f'\n    } */\n  },\n});\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\nimport Theme from '../../Theme';\n\nconst Home = function Home() {\n\n  const [file, setFile] = useState();\n\n  const handleSubmit = () => {\n    const data = new FormData() \n    data.append('file', file)\n  };\n\n  const handleInputChange = (e) => {\n    console.log(file) \n    setFile(e.target.files[0]);\n    console.log(file);\n  };\n\n  \n\n  return (\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={Theme}>\n        <CssBaseline />\n        <h1>Samychan</h1>\n        <form onSubmit={handleSubmit}>\n          <input type=\"file\" onChange={handleInputChange} />\n          <button type=\"submit\">Upload</button>\n        </form>\n      </ThemeProvider>\n    </StyledEngineProvider>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Api from '../../utils/Api';\n\nconst Stats = function Stats() {\n  const [stats, setStats] = useState([]);\n\n  useEffect(() => {\n    Api.getStats((data) => {\n      setStats(data);\n    });\n  });\n\n  return (\n    <div>\n      <h1>Stats</h1>\n      {stats.map((item) => (\n        <p>\n          <Link to={`/p/${item.hash}`} key={item.hash}>\n            {item.filename}\n            {' '}\n            (\n            {item.series}\n            -Series)\n          </Link>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { SnackbarProvider } from 'material-ui-snackbar-provider';\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport './custom.scss';\nimport Package from './components/Package';\nimport Home from './components/Home';\nimport Stats from './components/Stats';\nimport Theme from './Theme';\n\nrequire('dotenv').config();\n\nconst App = function App() {\n  return (\n    <SnackbarProvider SnackbarProps={{ autoHideDuration: 4000 }}>\n      <StyledEngineProvider injectFirst>\n        <ThemeProvider theme={Theme}>\n          <CssBaseline />\n          <Router>\n            <Route path=\"/stats\" exact component={Stats} />\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/p/:scmPackageHash\" component={Package} />\n          </Router>\n        </ThemeProvider>\n      </StyledEngineProvider>\n    </SnackbarProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}